{
    "swagger": "2.0",
    "info": {
        "title": "Software Voting Machine API",
        "description": "This API allows us to manage all related endpoints to our software voting machine app.",
        "version": "1.0.0"
    },
    "host": "127.0.0.1:5000",
    "basePath": "/",
    "schemes": [
        "http"
    ],
    "paths": {
        "/countries": {
            "post": {
                "tags": [
                    "Countries"
                ],
                "summary": "Create a new country",
                "description": "Creates a new country with the given data.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "country",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CountryCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Country created successfully",
                        "schema": {
                            "$ref": "#/definitions/CountryResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    }
                }
            },
            "get": {
                "tags": [
                    "Countries"
                ],
                "summary": "Get all countries",
                "description": "Returns a list of all countries in the database.",
                "responses": {
                    "200": {
                        "description": "A list of countries",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CountryResponse"
                            }
                        }
                    }
                }
            }
        },
        "/countries/{country_filter}": {
            "get": {
                "tags": [
                    "Countries"
                ],
                "summary": "Get a country by UUID or name",
                "description": "Retrieves the country with the specified UUID or nane.",
                "parameters": [
                    {
                        "name": "country_filter",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Country found",
                        "schema": {
                            "$ref": "#/definitions/CountryResponse"
                        }
                    },
                    "404": {
                        "description": "Country not found"
                    }
                }
            }
        },
        "/emails/user/{user_id}": {
            "get": {
                "tags": [
                    "Emails"
                ],
                "summary": "Get an email by user ID",
                "description": "Retrieves the email with the specified user ID.",
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Email found",
                        "schema": {
                            "$ref": "#/definitions/EmailResponse"
                        }
                    },
                    "404": {
                        "description": "Email not found"
                    }
                }
            }
        },
        "/login": {
            "post": {
                "tags": [
                    "Login"
                ],
                "summary": "Creates a JWT token for a user",
                "description": "Creates a JWT token for a user",
                "parameters": [
                    {
                        "in": "body",
                        "name": "login",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LoginCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Login successful",
                        "schema": {
                            "$ref": "#/definitions/LoginResponse"
                        }
                    },
                    "401": {
                        "description": "Couldn't create a token, invalid credentials"
                    }
                }
            }
        },
        "/options": {
            "post": {
                "tags": [
                    "Options"
                ],
                "summary": "Create a new option",
                "description": "Creates a new option with the given data.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "option",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/OptionCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Option created successfully",
                        "schema": {
                            "$ref": "#/definitions/OptionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/options/voting_session/{voting_session_id}": {
            "get": {
                "tags": [
                    "Options"
                ],
                "summary": "Get an option by session ID",
                "description": "Retrieves the option with the specified session ID.",
                "parameters": [
                    {
                        "name": "voting_session_id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Option found",
                        "schema": {
                            "$ref": "#/definitions/OptionResponse"
                        }
                    },
                    "404": {
                        "description": "Option not found"
                    }
                }
            }
        },
        "/options/{option_id}": {
            "get": {
                "tags": [
                    "Options"
                ],
                "summary": "Get an option by ID",
                "description": "Retrieves the option with the specified ID.",
                "parameters": [
                    {
                        "name": "option_id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Option found",
                        "schema": {
                            "$ref": "#/definitions/OptionResponse"
                        }
                    },
                    "404": {
                        "description": "Option not found"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Options"
                ],
                "summary": "Update an option by ID",
                "description": "Updates the option with the given ID using the provided data.",
                "parameters": [
                    {
                        "name": "option_id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "option",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/OptionUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Option updated successfully",
                        "schema": {
                            "$ref": "#/definitions/OptionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid inpatch"
                    },
                    "404": {
                        "description": "Option not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Options"
                ],
                "summary": "Delete an option by ID",
                "description": "Deletes the option with the specified ID.",
                "parameters": [
                    {
                        "name": "option_id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Option deleted successfully"
                    },
                    "404": {
                        "description": "Option not found"
                    }
                }
            }
        },
        "/organizations": {
            "post": {
                "tags": [
                    "Organizations"
                ],
                "summary": "Create a new organization",
                "description": "Creates a new organization with the given data.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "organization",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/OrganizationCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Organization created successfully",
                        "schema": {
                            "$ref": "#/definitions/OrganizationResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    }
                }
            },
            "get": {
                "tags": [
                    "Organizations"
                ],
                "summary": "Get all organizations",
                "description": "Returns a list of all organizations in the database.",
                "responses": {
                    "200": {
                        "description": "A list of organizations",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/OrganizationResponse"
                            }
                        }
                    }
                }
            }
        },
        "/organizations/{organization_id}": {
            "get": {
                "tags": [
                    "Organizations"
                ],
                "summary": "Get an organization by ID",
                "description": "Retrieves the organization with the specified ID.",
                "parameters": [
                    {
                        "name": "organization_id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Organization found",
                        "schema": {
                            "$ref": "#/definitions/OrganizationResponse"
                        }
                    },
                    "404": {
                        "description": "Organization not found"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Organizations"
                ],
                "summary": "Update an organization by ID",
                "description": "Updates the organization with the given ID using the provided data.",
                "parameters": [
                    {
                        "name": "organization_id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "organization",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/OrganizationCreate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Organization updated successfully",
                        "schema": {
                            "$ref": "#/definitions/OrganizationResponse"
                        }
                    },
                    "404": {
                        "description": "Organization not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Organizations"
                ],
                "summary": "Delete an organization by ID",
                "description": "Deletes the organization with the specified ID.",
                "parameters": [
                    {
                        "name": "organization_id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Organization deleted successfully"
                    },
                    "404": {
                        "description": "Organization not found"
                    }
                }
            }
        },
        "/passwords/{user_id}": {
            "get": {
                "tags": [
                    "Passwords"
                ],
                "summary": "Get password by user ID",
                "description": "Retrieves the password with the specified user ID.",
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password found",
                        "schema": {
                            "$ref": "#/definitions/PasswordResponse"
                        }
                    },
                    "404": {
                        "description": "Password not found"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Passwords"
                ],
                "summary": "Update a password by user ID",
                "description": "Updates the password with the given userID using the provided data.",
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "password",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PasswordUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password updated successfully",
                        "schema": {
                            "$ref": "#/definitions/PasswordResponse"
                        }
                    },
                    "404": {
                        "description": "Password not found"
                    }
                }
            }
        },
        "/profile_statuses/{user_id}": {
            "get": {
                "tags": [
                    "ProfileStatuses"
                ],
                "summary": "Get a profile status by user ID",
                "description": "Retrieves the profile status with the specified user ID.",
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Profile status found",
                        "schema": {
                            "$ref": "#/definitions/ProfileStatusResponse"
                        }
                    },
                    "404": {
                        "description": "Profile status not found"
                    }
                }
            },
            "patch": {
                "tags": [
                    "ProfileStatuses"
                ],
                "summary": "Update a profile status by user ID",
                "description": "Updates the profile status with the given user ID using the provided data.",
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "profile_status",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ProfileStatusUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Profile status updated successfully",
                        "schema": {
                            "$ref": "#/definitions/ProfileStatusResponse"
                        }
                    },
                    "404": {
                        "description": "Profile status not found"
                    }
                }
            }
        },
        "/roles": {
            "post": {
                "tags": [
                    "Roles"
                ],
                "summary": "Create a new role",
                "description": "Creates a new role with the given data.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "role",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RoleCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Role created successfully",
                        "schema": {
                            "$ref": "#/definitions/RoleResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    }
                }
            },
            "get": {
                "tags": [
                    "Roles"
                ],
                "summary": "Get all roles",
                "description": "Returns a list of all roles in the database.",
                "responses": {
                    "200": {
                        "description": "A list of roles",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/RoleResponse"
                            }
                        }
                    }
                }
            }
        },
        "/roles/{role_id}": {
            "get": {
                "tags": [
                    "Roles"
                ],
                "summary": "Get a role by ID",
                "description": "Retrieves the role with the specified UUID.",
                "parameters": [
                    {
                        "name": "role_id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role found",
                        "schema": {
                            "$ref": "#/definitions/RoleResponse"
                        }
                    },
                    "404": {
                        "description": "Role not found"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Roles"
                ],
                "summary": "Update a role by ID",
                "description": "Updates the role with the given UUID using the provided data.",
                "parameters": [
                    {
                        "name": "role_id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "role",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RoleCreate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role updated successfully",
                        "schema": {
                            "$ref": "#/definitions/RoleResponse"
                        }
                    },
                    "404": {
                        "description": "Role not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Roles"
                ],
                "summary": "Delete a role by ID",
                "description": "Deletes the role with the specified UUID.",
                "parameters": [
                    {
                        "name": "role_id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role deleted successfully"
                    },
                    "404": {
                        "description": "Role not found"
                    }
                }
            }
        },
        "/users": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Create a new user",
                "description": "Creates a new user with the given data.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "user",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UserCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created successfully",
                        "schema": {
                            "$ref": "#/definitions/UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/users/organization/{organization_id}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get a user by the organization ID",
                "description": "Retrieves the user with the specified organization ID.",
                "parameters": [
                    {
                        "name": "organization_id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User found",
                        "schema": {
                            "$ref": "#/definitions/UserResponse"
                        }
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            }
        },
        "/users/{user_id}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get a user by ID",
                "description": "Retrieves the user with the specified ID.",
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User found",
                        "schema": {
                            "$ref": "#/definitions/UserResponse"
                        }
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Users"
                ],
                "summary": "Update a user by ID",
                "description": "Updates the user with the given ID using the provided data.",
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "user",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UserUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User updated successfully",
                        "schema": {
                            "$ref": "#/definitions/UserResponse"
                        }
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Users"
                ],
                "summary": "Delete a user by ID",
                "description": "Deletes the user with the specified ID.",
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User deleted successfully"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            }
        },
        "/votes": {
            "post": {
                "tags": [
                    "Votes"
                ],
                "summary": "Create a new vote",
                "description": "Creates a new vote with the given data.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "vote",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VoteCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Vote created successfully",
                        "schema": {
                            "$ref": "#/definitions/VoteResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/votes/{vote_token}": {
            "get": {
                "tags": [
                    "Votes"
                ],
                "summary": "Get a vote by token",
                "description": "Gets the vote with the given token using the provided data.",
                "parameters": [
                    {
                        "name": "vote_token",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Vote updated successfully",
                        "schema": {
                            "$ref": "#/definitions/VoteResponse"
                        }
                    },
                    "404": {
                        "description": "Vote not found"
                    }
                }
            }
        },
        "/votes/voting_session_id/{voting_session_id}": {
            "get": {
                "tags": [
                    "Votes"
                ],
                "summary": "Get a vote by voting session ID",
                "description": "Gets the vote by voting session ID using the provided data.",
                "parameters": [
                    {
                        "name": "voting_session_id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Vote updated successfully",
                        "schema": {
                            "$ref": "#/definitions/VoteResponse"
                        }
                    },
                    "404": {
                        "description": "Vote not found"
                    }
                }
            }
        },
        "/vote_submissions": {
            "post": {
                "tags": [
                    "VoteSubmissions"
                ],
                "summary": "Create a new vote submission",
                "description": "Creates a new vote submission with the given data.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "vote_submission",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VoteSubmissionCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Vote submission created successfully",
                        "schema": {
                            "$ref": "#/definitions/VoteSubmissionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/vote_submissions/{submission_id}": {
            "get": {
                "tags": [
                    "VoteSubmissions"
                ],
                "summary": "Get vote submission by ID",
                "description": "Retrieves a vote submission by its ID.",
                "parameters": [
                    {
                        "name": "submission_id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "vote_submission",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VoteSubmissionCreate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Vote submission found",
                        "schema": {
                            "$ref": "#/definitions/VoteSubmissionResponse"
                        }
                    },
                    "404": {
                        "description": "Vote submission not found"
                    }
                }
            }
        },
        "/vote_submissions/voting_session/{voting_session_id}": {
            "get": {
                "tags": [
                    "VoteSubmissions"
                ],
                "summary": "Get vote submissions by session ID",
                "description": "Retrieves all vote submissions associated with a specific voting session.",
                "parameters": [
                    {
                        "name": "vote_submission_id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "vote_submission",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Vote submissions retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/VoteSubmissionResponse"
                        }
                    },
                    "404": {
                        "description": "Vote submission not found"
                    }
                }
            }
        },
        "/voting_sessions": {
            "post": {
                "tags": [
                    "VotingSessions"
                ],
                "summary": "Create a new voting session",
                "description": "Creates a new voting session with the given data.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "voting_session",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VotingSessionCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Voting session created successfully",
                        "schema": {
                            "$ref": "#/definitions/VotingSessionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    }
                }
            },
            "get": {
                "tags": [
                    "VotingSessions"
                ],
                "summary": "Get all voting sessions",
                "description": "Returns a list of all voting sessions in the database.",
                "responses": {
                    "200": {
                        "description": "A list of voting sessions",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VotingSessionResponse"
                            }
                        }
                    }
                }
            }
        },
        "/voting_sessions/{voting_session_id}": {
            "get": {
                "tags": [
                    "VotingSessions"
                ],
                "summary": "Get a voting session by ID",
                "description": "Retrieves the voting session with the specified ID.",
                "parameters": [
                    {
                        "name": "voting_session_id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Voting session found",
                        "schema": {
                            "$ref": "#/definitions/VotingSessionResponse"
                        }
                    },
                    "404": {
                        "description": "Voting session not found"
                    }
                }
            },
            "patch": {
                "tags": [
                    "VotingSessions"
                ],
                "summary": "Update a voting session by ID",
                "description": "Updates the voting session with the given ID using the provided data.",
                "parameters": [
                    {
                        "name": "voting_session_id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "voting_session",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VotingSessionCreate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Voting session updated successfully",
                        "schema": {
                            "$ref": "#/definitions/VotingSessionResponse"
                        }
                    },
                    "404": {
                        "description": "Voting session not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "VotingSessions"
                ],
                "summary": "Delete a voting session by ID",
                "description": "Deletes the voting session with the specified ID.",
                "parameters": [
                    {
                        "name": "voting_session_id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Voting session deleted successfully"
                    },
                    "404": {
                        "description": "Voting session not found"
                    }
                }
            }
        }
    },
    "definitions": {
        "CountryCreate": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            },
            "required": [
                "name"
            ]
        },
        "CountryResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The unique identifier of the country"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the country"
                }
            }
        },
        "EmailResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The unique identifier of the email"
                },
                "email_address": {
                    "type": "string",
                    "description": "The email address"
                },
                "user_id": {
                    "type": "string",
                    "description": "The ID of the user associated with the email"
                },
                "is_verified": {
                    "type": "boolean",
                    "description": "Indicates whether the email is verified"
                },
                "created_at": {
                    "type": "string",
                    "example": "2025-06-08T08:24:47",
                    "description": "The date the email was created"
                }
            }
        },
        "LoginCreate": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "description": "The user's email address"
                },
                "hashed_password": {
                    "type": "string",
                    "description": "User's hashed password"
                }
            },
            "required": [
                "email",
                "hashed_password"
            ]
        },
        "LoginResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string",
                    "description": "The unique identifier token for the login session"
                }
            }
        },
        "OptionCreate": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the option"
                },
                "voting_session_id": {
                    "type": "string",
                    "description": "The UUID of the session associated with the option"
                }
            },
            "required": [
                "name",
                "voting_session_id"
            ]
        },
        "OptionUpdate": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the option"
                }
            },
            "required": [
                "name"
            ]
        },
        "OptionResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The unique identifier of the option"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the option"
                },
                "voting_session_id": {
                    "type": "string",
                    "description": "The UUID of the session associated with the option"
                }
            }
        },
        "OrganizationCreate": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the organization"
                }
            },
            "required": [
                "name"
            ]
        },
        "OrganizationResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The organization's unique identifier"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the organization"
                }
            }
        },
        "PasswordUpdate": {
            "type": "object",
            "properties": {
                "user_id": {
                    "type": "string",
                    "description": "The ID of the user"
                },
                "hashed_password": {
                    "type": "string",
                    "description": "The hashed password"
                }
            },
            "required": [
                "user_id",
                "hashed_password"
            ]
        },
        "PasswordResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The unique identifier of the password"
                },
                "user_id": {
                    "type": "string",
                    "description": "The ID of the user"
                },
                "hashed_password": {
                    "type": "string",
                    "description": "The hashed password"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2025-06-08T08:24:47",
                    "description": "The date the password was last updated"
                }
            }
        },
        "ProfileStatusUpdate": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The status of the profile"
                }
            },
            "required": [
                "name"
            ]
        },
        "ProfileStatusResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the profile status"
                },
                "name": {
                    "type": "string",
                    "description": "The status of the profile"
                },
                "user_id": {
                    "type": "string",
                    "description": "The ID of the user associated with the profile status"
                }
            }
        },
        "RoleCreate": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the role"
                },
                "organization_id": {
                    "type": "integer",
                    "description": "The ID of the organization associated with the role"
                }
            },
            "required": [
                "name",
                "id"
            ]
        },
        "RoleResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The unique identifier of the role"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the role"
                },
                "organization_id": {
                    "type": "string",
                    "description": "The unique identifies of the organization associated with the role"
                }
            }
        },
        "UserCreate": {
            "type": "object",
            "properties": {
                "first_name": {
                    "type": "string",
                    "description": "The first name of the user"
                },
                "last_name": {
                    "type": "string",
                    "description": "The last name of the user"
                },
                "date_of_birth": {
                    "type": "string",
                    "format": "date",
                    "description": "The date of birth of the user"
                },
                "country_id": {
                    "type": "string",
                    "description": "The ID of the country associated with the user"
                },
                "city": {
                    "type": "string",
                    "description": "The city of the user"
                },
                "address": {
                    "type": "string",
                    "description": "The address of the user"
                },
                "national_id": {
                    "type": "integer",
                    "description": "The national ID of the user"
                },
                "role_id": {
                    "type": "string",
                    "description": "The ID of the role associated with the user"
                },
                "organization_id": {
                    "type": "string",
                    "description": "The ID of the organization associated with the user"
                }
            },
            "required": [
                "first_name",
                "last_name",
                "date_of_birth",
                "country_id",
                "role_id",
                "organization_id"
            ]
        },
        "UserUpdate": {
            "type": "object",
            "properties": {
                "first_name": {
                    "type": "string",
                    "description": "The first name of the user"
                },
                "last_name": {
                    "type": "string",
                    "description": "The last name of the user"
                },
                "country_id": {
                    "type": "string",
                    "description": "The ID of the country associated with the user"
                },
                "city": {
                    "type": "string",
                    "description": "The city of the user"
                },
                "address": {
                    "type": "string",
                    "description": "The address of the user"
                },
                "national_id": {
                    "type": "integer",
                    "description": "The national ID of the user"
                }
            }
        },
        "UserResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The unique identifier of the user"
                },
                "first_name": {
                    "type": "string",
                    "description": "The first name of the user"
                },
                "last_name": {
                    "type": "string",
                    "description": "The last name of the user"
                },
                "date_of_birth": {
                    "type": "string",
                    "format": "date",
                    "description": "The date of birth of the user"
                },
                "country_id": {
                    "type": "string",
                    "description": "The ID of the country associated with the user"
                },
                "city": {
                    "type": "string",
                    "description": "The city of the user"
                },
                "address": {
                    "type": "string",
                    "description": "The address of the user"
                },
                "national_id": {
                    "type": "integer",
                    "description": "The national ID of the user"
                },
                "role_id": {
                    "type": "string",
                    "description": "The ID of the role associated with the user"
                },
                "organization_id": {
                    "type": "string",
                    "description": "The ID of the organization associated with the user"
                },
                "profile_status_id": {
                    "type": "integer",
                    "description": "The ID of the profile status associated with the user"
                },
                "created_at": {
                    "type": "string",
                    "example": "2025-06-08T08:24:47",
                    "description": "The date the user was created"
                }
            }
        },
        "VoteCreate": {
            "type": "object",
            "properties": {
                "voting_session_id": {
                    "type": "string",
                    "description": "The ID of the voting session"
                },
                "option_id": {
                    "type": "string",
                    "description": "The ID of the option"
                },
                "token": {
                    "type": "string",
                    "description": "The token associated to that vote"
                },
                "key_image": {
                    "type": "string",
                    "description": "The key_image of the vote"
                },
                "ring_hash": {
                    "type": "string",
                    "description": "The ring_hash of the vote"
                },
                "signature": {
                    "type": "string",
                    "description": "The signature of the vote"
                }
            },
            "required": [
                "voting_session_id",
                "option_id",
                "token",
                "key_image",
                "ring_hash",
                "signature"
            ]
        },
        "VoteResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The unique identifier of the vote"
                },
                "voting_session_id": {
                    "type": "string",
                    "description": "The ID of the voting session"
                },
                "option_id": {
                    "type": "string",
                    "description": "The ID of the option"
                },
                "submission_timestamp": {
                    "type": "string",
                    "example": "2025-06-08T08:24:47",
                    "description": "The timestamp of the vote submission"
                }
            }
        },
        "VoteSubmissionCreate": {
            "type": "object",
            "properties": {
                "user_id": {
                    "type": "integer",
                    "description": "The ID of the user"
                },
                "voting_session_id": {
                    "type": "integer",
                    "description": "The ID of the voting session"
                }
            },
            "required": [
                "user_id",
                "voting_session_id"
            ]
        },
        "VoteSubmissionResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The unique identifier of the vote submission"
                },
                "voting_session_id": {
                    "type": "integer",
                    "description": "The ID of the voting session"
                },
                "has_voted": {
                    "type": "boolean",
                    "description": "Indicates whether the user has voted"
                }
            }
        },
        "VotingSessionCreate": {
            "type": "object",
            "properties": {
                "title": {
                    "type": "string",
                    "description": "The title of the voting session"
                },
                "question": {
                    "type": "string",
                    "description": "The question being voted on in the session"
                },
                "start_datetime": {
                    "type": "string",
                    "example": "2025-06-08T08:24:47",
                    "description": "The start time of the voting session"
                },
                "end_datetime": {
                    "type": "string",
                    "example": "2025-06-08T08:24:47",
                    "description": "The end time of the voting session"
                },
                "organization_id": {
                    "type": "string",
                    "description": "The ID of the organization associated with the voting session"
                },
                "role_id": {
                    "type": "string",
                    "description": "The ID of the role associated with the voting session"
                }
            },
            "required": [
                "title",
                "start_datetime",
                "end_datetime",
                "role_id",
                "organization_id",
                "key_ring"
            ]
        },
        "VotingSessionResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The unique identifier of the voting session"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the voting session"
                },
                "question": {
                    "type": "string",
                    "description": "The question being voted on in the session"
                },
                "start_datetime": {
                    "type": "string",
                    "example": "2025-06-08T08:24:47",
                    "description": "The start time of the voting session"
                },
                "end_datetime": {
                    "type": "string",
                    "example": "2025-06-08T08:24:47",
                    "description": "The end time of the voting session"
                },
                "organization_id": {
                    "type": "string",
                    "description": "The ID of the organization associated with the voting session"
                },
                "role_id": {
                    "type": "string",
                    "description": "The ID of the role associated with the voting session"
                },
                "key_ring": {
                    "type": "string",
                    "description": "The key ring associated with the voting session"
                }
            }
        }
    }
}